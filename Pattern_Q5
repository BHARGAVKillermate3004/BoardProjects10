import java.util.Scanner;
class pattern_5
{
   int n;//for number of rows
   int a;//for choice
   pattern_5()
   {
       n=0;
       a=0;
    }
   void input()//for insersion of number of rows and choice of pattern 
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("If you want to print first pattern then enter choice as 1");
       System.out.println("If you want to print second pattern then enter choice as 2");
       System.out.println("If neither of them, then press any other integer other than 1 or 2:");
       System.out.println("Ënter the number choice:");
       a=sc.nextInt();
       System.out.println("Ënter the number of rows:");
       n=sc.nextInt();
    }
   void generatepattern()
   {
       switch (a)
        {
            case 1://pattern of numbers
            for(int l=1;l<=n;l++)//no. of rows
            {
                for(int k=1; k<=l; k++)
                {
                    System.out.print(k+" ");
                }
                System.out.println();
            }
            break;
            case 2://pattern of 5
            for(int j=1;j<=n;j++)//no. of rows
            {
                for(int i=n;i>=1;i--)
                {
                System.out.print("5 ");
                }
            }
            break;
            default:
            System.out.println("Enter a valid integer [1/2]");
        }
    }
   public static void main()//calling methods through objects
    {
        pattern_5 obj=new pattern_5();
        int choice1;
        Scanner sc1=new Scanner(System.in);
        do
        {
          obj.input();
          obj.generatepattern();
          System.out.println("Would you like to continue ?");
          System.out.println("If yes press 1, and press any other number to exit");
          choice1=sc1.nextInt();
          }while(choice1==1);
       }
    }

    /*5.	Write a program to generate the patterns till n terms based upon the user’s choice of triangle to be displayed.                                             

 1                                                 5  5  5  5  5
 1 2                                               5  5  5  5
 1 2 3                                             5  5  5
 1 2 3 4                                           5  5
 1 2 3 4 5				                              5	
*/
